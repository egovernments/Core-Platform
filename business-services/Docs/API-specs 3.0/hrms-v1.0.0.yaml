openapi: 3.0.1
info:
  title: Employee Information System APIs - Employee
  description: All APIs available from Employee Information System  for employee services
    are listed here. 1. To create statewide standardized database of the employee
    in order to streamline processes related to personnel management. 2. To increase
    transparency for higher management for efficient resource planning 3. Integration
    with rainmaker modules for  security, authentication and workflow handling  4.
    Setting KPIs for employees and timely report generation
  contact:
    name: Vishal Mahuli
  version: 1.0.0
servers:
- url: /rainmaker-hrms/[API endpoint]
paths:
  /employees/_search:
    post:
      tags:
      - Employee
      summary: Get the list of employees defined in the system.
      description: |
        Get the employee list based on the input parameters. Response will give the minimum set of information related to the employee.
      parameters:
      - name: codes
        in: query
        description: List of employee codes
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: names
        in: query
        description: List of employee names
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: departments
        in: query
        description: List of Department codes for the employee assignment.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: designations
        in: query
        description: List of Designation codes for the employee assignment.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: asOnDate
        in: query
        description: Epoch Date of assignment
        schema:
          type: number
      - name: ids
        in: query
        description: List of Unique Id of employee
        style: form
        explode: false
        schema:
          maxItems: 100
          type: array
          items:
            type: integer
      - name: employeestatuses
        in: query
        description: List of Unique codes of employee status
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: employeetypes
        in: query
        description: List of Unique codes of employee type
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: uuids
        in: query
        description: List of Unique uuid of employee
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: positions
        in: query
        description: List of Unique Positions
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
      - name: roles
        in: query
        description: List of Roles of employee
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: phone
        in: query
        description: Phone Number
        required: true
        schema:
          type: string
      - name: isActive
        in: query
        description: True will return active employees, False otherwise
        required: true
        schema:
          type: boolean
      - name: offset
        in: query
        description: Offset of the search result
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        description: No of records to be returned from the offset
        required: true
        schema:
          type: integer
      - name: tenantid
        in: query
        description: Tenant id
        required: true
        schema:
          type: string
      requestBody:
        description: Common request info for getting employee.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeRes'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: requestInfo
  /employees/_create:
    post:
      tags:
      - Employee
      summary: Create a new employee in the system along with all the related informations
        like - assignment, jurisdiction, service, education and probation
      description: To create a new employee we can use POST and set all the required
        and non-mandatory parameters. When an employee is created, an user is also
        created along with it. Type value in object will be "EMPLOYEE".
      requestBody:
        description: Details for the new employee.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeReq'
        required: true
      responses:
        202:
          description: Employee request accepted for creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeRes'
        400:
          description: Invalid Input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: employees
  /employees/_update:
    post:
      tags:
      - Employee
      summary: Update Employee data for a particular employee
      description: To update an existing employee's employee details and all other
        details like assignment, jurisdiction, qualification service details and porbation.
        This API will also be used for deactivating an employee
      requestBody:
        description: Request header for the employee with new of values.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeReq'
        required: true
      responses:
        202:
          description: Employee request accepted for update.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeRes'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: employees
  /employees/_count:
    post:
      tags:
      - Employee
      summary: Get the list of count of active and inactive employee.
      description: |
        Get the list of count of active and inactive employee for given tenant Id.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema: {}
      responses:
        200:
          description: Successful response, present the list of count of active and
            inactive employee for given tenant Id.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeCountResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
components:
  schemas:
    Employee:
      required:
      - assignments
      - employeeStatus
      - employeeType
      - jurisdictions
      - tenantId
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        id:
          type: integer
          description: Numeric id of the employee, this is same as user id.
        uuid:
          type: string
          description: UUID of the employee, this is same as user uuid.
        code:
          maxLength: 256
          minLength: 1
          type: string
          description: The unique code for an employee. This will autogenerated if
            there's no input otherwise user will have to input a unique code.
        employeeStatus:
          type: string
          description: Status of the employee from the status master where object
            type is "Employee Master". Default value will be "EMPLOYED".  Possible
            status list for employee are - EMPLOYED,RETIRED,SUSPENDED and DECEASED
        employeeType:
          type: string
          description: Type of employment of the employee from the EmployeeType.
        dateOfAppointment:
          type: number
          description: Epoch Date of appointment of the employee.
          format: int128
        jurisdictions:
          maxItems: 50
          minItems: 1
          uniqueItems: true
          type: array
          description: List of Jurisdictions for which this employee has access to.
            Currently we dont validate this
          items:
            $ref: '#/components/schemas/Jurisdiction'
        assignments:
          type: array
          description: List of assignments for the employee.
          items:
            $ref: '#/components/schemas/Assignment'
        serviceHistory:
          maxItems: 25
          uniqueItems: true
          type: array
          description: List of service history for the employee.
          items:
            $ref: '#/components/schemas/ServiceHistory'
        isActive:
          type: boolean
          description: Field to mark whether the employee is active
        education:
          maxItems: 25
          uniqueItems: true
          type: array
          description: List of educational qualification for the employee.
          items:
            $ref: '#/components/schemas/EducationalQualification'
        tests:
          maxItems: 25
          uniqueItems: true
          type: array
          description: List of departmental tests qualified by the employee.
          items:
            $ref: '#/components/schemas/DepartmentalTest'
        tenantId:
          maxLength: 256
          type: string
          description: Unique Identifier of which tenant this data is defined
        deactivationDetails:
          maxItems: 25
          uniqueItems: true
          type: array
          description: List of deactivation details for the employee.
          items:
            $ref: '#/components/schemas/DeactivationDetails'
        reactivationDetails:
          maxItems: 25
          uniqueItems: true
          type: array
          description: List of reactivation details for the employee.
          items:
            $ref: '#/components/schemas/ReactivationDetails'
        documents:
          maxItems: 50
          uniqueItems: true
          type: array
          description: List of all the documents associated with an employee.
          items:
            $ref: '#/components/schemas/EmployeeDocuments'
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: An employee is by default User of the system. User will be created
        from employee.
    Assignment:
      required:
      - department
      - designation
      - fromDate
      - toDate
      type: object
      properties:
        id:
          type: string
          description: UUID of the assignment.
        position:
          type: integer
          description: Position Id associated with the assignment - autogenerated.
          format: int64
        designation:
          type: string
          description: Designation code associated with the assignment.
        department:
          type: string
          description: Unique code of the Department associated with the assignment.
        fromDate:
          type: integer
          description: Epoch value of From Date of assignment period.
          format: int128
        toDate:
          type: integer
          description: Epoch value of Till Date of assignment period.
          format: int128
        govtOrderNumber:
          type: string
          description: The order number issued for any transfer, promotion, demotion
            or delegation of power.
        reportingTo:
          type: string
          description: Name of the employee who this employee reports to.
        isHOD:
          type: boolean
          description: Value true means, this guy is the HOD under this assignment.
        isCurrentAssignment:
          type: boolean
          description: Value true means, This is the guy's current assignment.
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    ServiceHistory:
      required:
      - orderNo
      - serviceFrom
      - serviceStatus
      - serviceTo
      type: object
      properties:
        id:
          type: string
          description: UUID of the service details.
        serviceStatus:
          type: string
          description: Detail of the service that the employee has done.
        serviceFrom:
          type: integer
          description: Epoch date on which this service was applicable from.
          format: int128
        serviceTo:
          type: integer
          description: Epoch date on which this service was applicable from.
          format: int128
        location:
          type: string
          description: The government order number passed for the service change.
        orderNo:
          type: string
          description: The government order number passed for the service change.
        isCurrentPosition:
          type: boolean
          description: Value signifies if this is the current working status.
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    EducationalQualification:
      required:
      - qualification
      - stream
      - yearOfPassing
      type: object
      properties:
        id:
          type: string
          description: UUID of the qualification details.
        qualification:
          type: string
          description: Name of the qualifying degree.
        stream:
          type: string
          description: The main subject studies as part of the qualifying degree.
        yearOfPassing:
          type: integer
          description: The year in which the employee has finished the qualification.
          format: int32
        university:
          type: string
          description: Name of the university/board from which the mentioned qualification
            was acquired.
        remarks:
          type: string
          description: Any remarks to be captured for this technical qualification.
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    DepartmentalTest:
      required:
      - test
      - yearOfPassing
      type: object
      properties:
        id:
          type: string
          description: UUID of the departmental test details.
        test:
          type: string
          description: Name of the Test taken.
        yearOfPassing:
          type: integer
          description: The year in which the employee has qualified this test.
          format: int32
        remarks:
          type: string
          description: Any general remarks.
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    EmployeeReq:
      required:
      - Employee
      - RequestInfo
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        Employee:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    EmployeeRes:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Employee:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    EmployeeDocuments:
      required:
      - employeeId
      type: object
      properties:
        id:
          type: integer
          description: The unique id of this object.
          format: int64
        employeeId:
          type: integer
          description: The unique id of employee.
          format: int64
        documentId:
          type: string
          description: The unique url for the document attached.
        documentName:
          type: string
          description: Name of the document attached.
        referenceType:
          type: string
          description: Each details in Employee can have multiple documents attached.
            Based on the reference type we are differentiate which document is relevant
            from which details.
        referenceId:
          type: string
          description: The unique id of the referenced objecy. (Assignment id, Service
            id etc).
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    Jurisdiction:
      required:
      - boundary
      - boundaryType
      - hierarchy
      type: object
      properties:
        id:
          type: string
          description: UUID of the jurisdiction - autogenerated
          format: uuid
        hierarchy:
          type: string
          description: Hierarchy code from the boundary data
        boundary:
          type: string
          description: Boundary code from the boundary data
        boundaryType:
          type: string
          description: Boundary Type code from the boundary data
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    DeactivationDetails:
      type: object
      properties:
        id:
          type: string
          description: UUID of the deactivation detail
        employeeId:
          type: string
          description: UUID of the employee to whom this details belongs.
        reasonForDeactivation:
          type: string
          description: Reason for deactivation
        effectiveFrom:
          type: integer
          description: Epoch date from which the deactivation is effective.
          format: int128
        orderNo:
          type: string
          description: The government order number passed for the deactivation
        typeOfDeactivation:
          type: object
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    ReactivationDetails:
      type: object
      properties:
        id:
          type: string
          description: UUID of the deactivation detail
        employeeId:
          type: string
          description: UUID of the employee to whom this details belongs.
        reasonForReactivation:
          type: string
          description: Reason for deactivation
        effectiveFrom:
          type: integer
          description: Epoch date from which the reactivation is effective.
          format: int128
        orderNo:
          type: string
          description: The government order number passed for the reactivation
        typeOfReactivation:
          type: object
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
    AuditDetails:
      type: object
      properties:
        createdBy:
          type: string
          description: Id of the user who created the record.
        createdDate:
          type: integer
          description: Epoch Date on which the user master data was added into the
            system.
          format: int64
        lastModifiedBy:
          type: string
          description: Id of the user who last modified the record.
        lastModifiedDate:
          type: integer
          description: Epoch Date on which the user master data was last modified.
          format: int64
    EmployeeCount:
      type: object
      properties:
        activeEmployee:
          type: string
          description: Number of active employee present in the system
        inactiveEmployee:
          type: string
          description: Number of inactive employee present in the system
        totalEmployee:
          type: string
          description: Total number of employee present in the system
      description: Capture the employee count details
    EmployeeCountResponse:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseHeader'
        EmployeeCount:
          $ref: '#/components/schemas/EmployeeCount'
      description: Response to the service request
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        uuid:
          type: string
          description: System Generated User id of the authenticated user.
        userName:
          type: string
          description: Unique user name of the authenticated user
        password:
          type: string
          description: password of the user.
        idToken:
          type: string
          description: This will be the OTP.
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        code:
          maxLength: 64
          type: string
          description: Unique code of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    ErrorRes_2:
      required:
      - ResponseHeader
      type: object
      properties:
        ResponseHeader:
          $ref: '#/components/schemas/ResponseHeader'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error_2'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseHeader as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseHeader:
      required:
      - msgId
      - resMsgId
      - status
      type: object
      properties:
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing
          enum:
          - COMPLETED
          - ACCEPTED
          - FAILED
        signature:
          type: string
          description: Hash describing the current ResponseHeader
        error:
          $ref: '#/components/schemas/Error_2'
        information:
          type: object
          properties: {}
          description: Additional information from API
        debug:
          type: object
          properties: {}
          description: Debug information when requested
        additionalInfo:
          type: object
          properties: {}
          description: Any additional information if required e.g. status url (to
            find out the current status of an asynchronous processing response), additional
            links to perform special functions like file uploads etc.
      description: ResponseHeader should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseHeader should
        always correspond to the same values in respective request's RequestHeader.
    Error_2:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseHeader as part of ErrorResponse whenever the request processing
        status in the ResponseHeader is FAILED. HTTP return in this scenario will
        usually be HTTP 400.
    User:
      required:
      - active
      - gender
      - locale
      - mobileNumber
      - name
      - tenantId
      - type
      - userName
      type: object
      properties:
        id:
          type: integer
          description: The unique id an user.
          format: int64
        userName:
          maxLength: 64
          minLength: 1
          type: string
          description: The unique username used for user login.
        password:
          maxLength: 64
          type: string
          description: Password for user login.
          format: password
        salutation:
          maxLength: 5
          type: string
          description: The salutation of user name. Example- Mr, Miss, Mrs
        name:
          maxLength: 100
          minLength: 3
          type: string
          description: The full name of the user.
        gender:
          type: string
          description: Gender of the user.
        mobileNumber:
          maxLength: 10
          type: string
          description: Mobile number ofuser the user
        emailId:
          maxLength: 128
          type: string
          description: Email address of the user
        altContactNumber:
          maxLength: 10
          type: string
          description: Alternate contact number of the user
        pan:
          maxLength: 10
          type: string
          description: PAN number of the user
        aadhaarNumber:
          maxLength: 12
          pattern: '[0-9]'
          type: string
          description: Aadhaar number of the user
        permanentAddress:
          maxLength: 300
          type: string
          description: Permanent address of the user.
        permanentCity:
          maxLength: 300
          type: string
          description: City of the permanent address.
        permanentPincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceCity:
          maxLength: 50
          type: string
          description: City of the correspondence address.
        correspondencePincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceAddress:
          maxLength: 300
          type: string
          description: Correspondence address of the user.
        active:
          type: boolean
          description: True if the user is active and False if the user is inactive.
        dob:
          type: string
          description: Data of bith of the user in dd/mm/yyyy format.
          format: date
        pwdExpiryDate:
          type: string
          description: Date on which the password registered will expire.
          format: date
          readOnly: true
        locale:
          maxLength: 10
          type: string
          description: Value will be set to "en_IN".
        type:
          maxLength: 20
          type: string
          description: System set value internally. For employee value will be always
            "EMPLOYEE". For citizen value will be "CITIZEN".
        signature:
          type: string
          description: Image to be loaded for the signature of the employee
        accountLocked:
          type: boolean
          description: Set to True if account is locked after several incorrect password
            attempt. False if account is not locked.
        roles:
          type: array
          description: List of roles that are attached to the user.
          items:
            $ref: '#/components/schemas/Role_2'
        fatherOrHusbandName:
          maxLength: 100
          type: string
          description: Name of user's father or husband.
        bloodGroup:
          maxLength: 3
          type: string
          description: Blood group of the user.
        identificationMark:
          maxLength: 300
          type: string
          description: Any identification mark of the person.
        photo:
          type: string
          description: Image to be loaded for the photo of the user
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the user master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the user master data was last modified.
          format: date
        otpReference:
          type: string
          description: This is the UUID token that we genarate as part of OTP.
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    Role_2:
      required:
      - name
      - tenantId
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the role.
          format: int64
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Role.
        code:
          maxLength: 50
          minLength: 2
          type: string
          description: The Code of the Role.
        description:
          maxLength: 256
          type: string
          description: The description of the Role.
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the role master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the role master data was last modified.
          format: date
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
