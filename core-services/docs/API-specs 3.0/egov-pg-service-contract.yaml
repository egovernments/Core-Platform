openapi: 3.0.1
info:
  title: eGov Payment Gateway Service.
  description: |
    This module acts as a liaison between eGov apps and external payment gateways. It facilitates payments, refunds and look up of transactions' status.
  contact:
    name: Egovernments Foundation
    email: contact@egovernments.org
  version: 1.0.0
servers:
- url: /egov-pg-service
paths:
  /payments/v1/_search:
    post:
      tags:
      - Payment
      summary: Retrieves the current status of a payment
      description: |
        Returns the current status of a payment in our systems; this does not guarantee live payment gateway status.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: txnId
        in: query
        description: Transaction id generated by the service during creation.
        schema:
          type: string
      - name: billId
        in: query
        description: Unique module based ID for which the transaction is being initiated,
          if billId is used, module should be included.
        schema:
          type: string
          format: varchar
      - name: user_uuid
        in: query
        description: User ID of the user as registered in user service, for whom the
          transaction was  carried out.
        schema:
          type: string
          format: varchar
      - name: module
        in: query
        description: Module name to which the billId belongs to.
        schema:
          type: string
      - name: moduleId
        in: query
        description: Unique identifier in the module for which the transaction is
          being initiated
        schema:
          type: string
      - name: receipt
        in: query
        description: Receipt ID generated for this payment
        schema:
          type: string
      - name: txnStatus
        in: query
        description: Current status of the transaction
        schema:
          type: string
      requestBody:
        description: Parameter to carry Request metadata in the request body
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: requestInfo
  /payments/v1/_create:
    post:
      tags:
      - Payment
      summary: Initiates a new payment transaction.
      description: Initiates a new payment transaction, on successful validation,
        a redirect is issued to the payment gateway.
      requestBody:
        description: Details of the payment and RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        302:
          description: Payment Initiated successfully, gateway redirection triggered.
          content: {}
        400:
          description: Payment initiation failed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: TransactionRequest
  /payments/v1/_update:
    post:
      tags:
      - Payment
      summary: Update an existing payment.
      description: Updates an existing payment transaction, to be used only by payment
        gateways to update status of payments. Verifies the authenticity of the request
        with the payment gateway. Forward all query params received from payment gateway
      requestBody:
        description: Details of the payment response obtained from the payment gateway.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfoWrapper'
        required: false
      responses:
        200:
          description: Payment Status transaction updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          description: Payment status update failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: RequestInfo
components:
  schemas:
    Transaction:
      required:
      - billId
      - callbackUrl
      - gateway
      - module
      - moduleId
      - productInfo
      - tenantId
      - txnAmount
      type: object
      properties:
        tenantId:
          maxLength: 50
          minLength: 2
          type: string
          description: The unique identifier for Service - this is equivalent to jurisdiction_id
            in Open311. As the platform intends to be multi tenanted - this is always
            required
        txnAmount:
          minLength: 1
          type: string
          description: Transaction Amount, preferably rounded off to two decimal places
        billId:
          type: string
          description: Unique bill ID associated with the transaction
        module:
          type: string
          description: Module business code for which the transaction is being initiated,
            ex PT, WS, PGR etc
        moduleId:
          type: string
          description: Unique identifier in the module for which the transaction is
            being initiated
        productInfo:
          type: string
          description: Brief description for which the transaction is being carried
            out.
        gateway:
          type: string
          description: Gateway to be used, from the available list, such as PAYTM,
            PHONEPE.
        callbackUrl:
          type: string
          description: URL to which control has to be redirected to from the gateway
        txnId:
          type: string
          description: Transaction ID of the payment, generated by the gateway service
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        txnStatus:
          type: string
          description: Current status of the transaction
          readOnly: true
          enum:
          - SUCCESS
          - FAILURE
          - PENDING
        txnStatusMsg:
          type: string
          description: Brief status message for the transaction
          readOnly: true
        gatewayTxnId:
          type: string
          description: Transaction ID returned by the gateway, for reference
          readOnly: true
        gatewayPaymentMode:
          type: string
          description: Mode of payment used at the gateway
          readOnly: true
        gatewayStatusCode:
          type: string
          description: Payment Gateway Specific RAW status code
          readOnly: true
        gatewayStatusMsg:
          type: string
          description: Payment Gateway Specific RAW status message
          readOnly: true
        receipt:
          type: string
          description: Receipt ID generated for this payment
          readOnly: true
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: Details of the payment object.
    User:
      required:
      - mobileNumber
      - name
      - tenantId
      - userName
      - uuid
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        uuid:
          type: string
          description: UUID for the user.
        userName:
          maxLength: 64
          minLength: 4
          type: string
          description: The unique username used of the user - this will be used for
            user login. This needs to be unique within the tenant.
        name:
          maxLength: 100
          minLength: 3
          type: string
          description: The full name of the user.
        mobileNumber:
          maxLength: 10
          type: string
          description: Mobile number of the user
        emailId:
          maxLength: 128
          type: string
          description: Email address of the user
    TransactionRequest:
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo'
        Transaction:
          $ref: '#/components/schemas/Transaction'
      description: The payment object, containing all necessary information for initiating
        a payment and the request body metadata
    RequestInfoWrapper:
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo'
      description: Wrapper for Request Info
    TransactionResponse:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Transaction:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      description: The payment seatch response object, representing the status of
        the payment
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    AuditDetails:
      type: object
      properties:
        createdBy:
          type: string
          description: username (preferred) or userid of the user that created the
            object
        lastModifiedBy:
          type: string
          description: username (preferred) or userid of the user that last modified
            the object
        createdTime:
          type: integer
          description: epoch of the time object is created
          format: int64
        lastModifiedTime:
          type: integer
          description: epoch of the time object is last modified
          format: int64
      description: Collection of audit related fields used by most models
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        id:
          type: integer
          description: User id of the authenticated user. Will be deprecated in future
          format: int32
        userName:
          type: string
          description: Unique user name of the authenticated user
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
x-common-path: https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml
