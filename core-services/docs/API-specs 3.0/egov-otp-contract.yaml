openapi: 3.0.1
info:
  title: Egov otp service
  description: Egov-otp service APIs - contains create , validate and search end point
  contact:
    name: eGov
    email: info@egovernments.org
  version: 1.1.0
servers:
- url: /egov-otp/v110
paths:
  /otp/v1/_create:
    post:
      tags:
      - OTPConfig
      summary: create OTP Configuration entry
      description: create OTP Configuration this API is internaly call from v1/_send
        end point, this  end point present in user-otp service no need of explicity
        call
      requestBody:
        description: required parameters have to be populated
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOTPConfigReq'
        required: true
      responses:
        200:
          description: Request acknowledged sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OTPConfigRes'
        400:
          description: Request failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: OTPConfig
  /otp/v1/_validate:
    post:
      tags:
      - OTPConfig
      summary: validate OTP Configuration entry
      description: validate OTP Configuration this end point is validate the otp respect
        to mobilenumber
      requestBody:
        description: required parameters have to be populated
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOTPConfigReq'
        required: true
      responses:
        200:
          description: Request acknowledged sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OTPConfigRes'
        400:
          description: Request failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: OTPConfig
  /otp/v1/_search:
    post:
      tags:
      - OTPConfig
      summary: search OTP Configuration entry using uuid
      description: search the mobile number and otp using uuid ,uuid nothing but otp
        reference number
      requestBody:
        description: required parameters have to be populated
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOTPConfigReq'
        required: true
      responses:
        200:
          description: Request acknowledged sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OTPConfigRes'
        400:
          description: Request failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: OTPConfig
components:
  schemas:
    Createotp:
      required:
      - identity
      - tenantId
      type: object
      properties:
        otp:
          type: string
          description: this is the five digit otp number ,this is mandatory in validate
            end point should pass otp value in  /otp/v1/_validate end point, in other
            end point it is read only
        uuid:
          type: string
          description: this is otp reference id, this is mandatory in search end point
            (/otp/v1/_search), and in other end point it is read only.
        identity:
          type: string
          description: identity is  username or mobile number. this is  mandatory
            field in create and validate end point end point is(/otp/v1/_create, and
            /otp/v1/_validat) and optional field in /otp/v1/_search end point
        tenantId:
          type: string
          description: Unique Identifier of the tenantId to which user primarily belongs
            and it is mandatory field in all the end points shoiuld pass this value
        isValidationSuccessful:
          type: string
          description: it return true or false  this is optional or read only property
            in all end point,
    CreateOTPConfigReq:
      required:
      - RequestInfo
      - otp
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        otp:
          $ref: '#/components/schemas/Createotp'
    OTPConfigRes:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        otp:
          type: array
          items:
            $ref: '#/components/schemas/Createotp'
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        id:
          type: integer
          description: User id of the authenticated user. Will be deprecated in future
          format: int32
        userName:
          type: string
          description: Unique user name of the authenticated user
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
x-common-path: https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-0-0.yml
x-api-id: org.egov.egov-otp
