openapi: 3.0.1
info:
  title: eGov Workflow Engine.
  description: "APIs for Workflow engine. This modules handles Below functionality.\
    \ \n1. Start workflow \n2. Validate documents and action on each step of workflow\n\
    3. Calculate state wise SLA as well as overall SLA of the application\n4. Search\
    \ existing workflow applications \n"
  contact:
    name: eGovernments Foundation
    email: contacts@egovernments.org
  version: 1.0.0
servers:
- url: /egov-wf
paths:
  /process/_transition:
    post:
      tags:
      - WorkFlow
      summary: Create new workflow entry for a given application number(businessId).
      description: "To create new workflow applicationin the system. API supports\
        \ bulk creation with max limit as defined in the Trade License Request. Please\
        \ note that either whole batch succeeds or fails, there's no partial batch\
        \ success. To create one workflow(ProcessInstance) instance, please pass array\
        \ with one workflow(ProcessInstance) object. \n  \n\nFollowing Conditions\
        \ are applied -\n  1. Valid action is send according to workflow configuration\
        \ defined\n  2. supportDocuments to perform workflow action will created.\
        \ In case of not attaching the Mandatory Supported Documents creation of workflow\
        \ Fails.\n  3. Application will move to next state if valid action is passes.\n"
      requestBody:
        description: Details for the new Workflow(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProcessIntanceRequest'
        required: true
      responses:
        201:
          description: ReponseInfo with Workflow(s) created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProcessIntanceResponse'
        400:
          description: Workflow(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: ProcessInstanceRequest
  /_search:
    post:
      tags:
      - WorkFlow
      summary: Get the list of workflow applications defined in the system.
      description: |-
        1. Search and get Application(s)  based on defined search criteria.
        2. In case multiple parameters are passed Application(s) will be searched as an AND combination of all the parameters.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: ids
        in: query
        description: unique identifier of Application
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: integer
            format: int64
      - name: businessService
        in: query
        description: Name of the workflow confguration.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: moduleName
        in: query
        description: Module name to which workflow application belongs
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: businessIds
        in: query
        description: The list of businessIds
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: string
      - name: assignee
        in: query
        description: The unique  Old license number for a Application.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: history
        in: query
        description: Boolean flag to return history of the workflow
        schema:
          type: boolean
      - name: limit
        in: query
        description: Number of records to be returned
        schema:
          type: integer
      - name: offset
        in: query
        description: Starting offset for returning search response
        schema:
          type: integer
      requestBody:
        description: Parameter to carry Request metadata in the request body
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Application(s) Retrived Successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProcessIntanceResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: requestInfo
  /_count:
    post:
      tags:
      - WorkFlow
      summary: Get the count of applications satisfying the given criteria
      description: |-
        1. Returns the total number of application in the system based on the criteria given
        2. Primarily used to shoe total count in inbox
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: ids
        in: query
        description: unique identifier of trade licence
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: integer
            format: int64
      - name: businessService
        in: query
        description: Unique application number for a trade license application.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: businessIds
        in: query
        description: The list of businessIds
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: integer
            format: int64
      - name: assignee
        in: query
        description: The unique  Old license number for a Trade license.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: history
        in: query
        description: Boolean flag to return history of the workflow
        schema:
          type: boolean
      requestBody:
        description: Parameter to carry Request metadata in the request body
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Trade License(s) Retrived Successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProcessIntanceResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: requestInfo
  /businessservice/_create:
    post:
      tags:
      - BusinessService
      summary: Create new BuinessService.
      description: "To create new workflow configuration(BuinessService) in the system.\
        \ API supports bulk creation with max limit as defined in the BuinessService\
        \ Request. Please note that either whole batch succeeds or fails, there's\
        \ no partial batch success. To create one BuinessService, please pass array\
        \ with one BuinessService object. \n  \n\nFollowing Conditions are applied\
        \ -\n  1. All actions have valid next state i.e next state should be present\
        \ in the system\n  2. uuids will be auto generated and assigned to all sub\
        \ objects\n  3. For end states isTerminateState should be true\n"
      requestBody:
        description: Details for the new BusinessService(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BusinessServiceRequest'
        required: true
      responses:
        201:
          description: ReponseInfo withBusinessService(s) created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BusinessServiceResponse'
        400:
          description: BusinessService(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: BusinessServiceRequest
  /businessservice/_update:
    post:
      tags:
      - BusinessService
      summary: Updates a existing BuinessService.
      description: "Can be used only to add new state or action in the workflow. Can\
        \ update any existing field. Removing of any state is not allowed as applications\
        \ in that state will be in invalid state \n  \n\nFollowing Conditions are\
        \ applied -\n  1. can add states and actions\n  2. can update roles in action,\
        \ SLA etc.\n"
      requestBody:
        description: Details for the new BusinessService(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BusinessServiceRequest'
        required: true
      responses:
        201:
          description: ReponseInfo withBusinessService(s) created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BusinessServiceResponse'
        400:
          description: BusinessService(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: BusinessServiceRequest
  /businessservice/_search:
    post:
      tags:
      - BusinessService
      summary: Get the list of BusinessServices defined in the system.
      description: |-
        1. Search and get BusinessServices(s)  based on defined search criteria.
        2. In case multiple parameters are passed BusinessService(s) will be searched as an AND combination of all the parameters.
      parameters:
      - name: businessServices
        in: query
        description: BusinessService code of the businessService
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: integer
            format: int64
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      requestBody:
        description: Parameter to carry Request metadata in the request body
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Trade License(s) Retrived Successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BusinessServiceResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: requestInfo
components:
  schemas:
    Document:
      required:
      - documentType
      - fileStoreId
      - tenantId
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: State Unique Identifier uuid
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        documentType:
          maxLength: 64
          minLength: 2
          type: string
          description: 1.Unique document type code from common master. 2. This is
            defined under mdms common master. 3. Object defination is defined under
            'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-1-1.yml#/definitions/DocumentType'
        fileStoreId:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique file store id of uploaded document.
        documentUid:
          maxLength: 64
          minLength: 2
          type: string
          description: document number(eg.Pan number, aadhar number).
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Trade License
    ProcessInstance:
      required:
      - action
      - businessId
      - businessService
      - tenantId
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique process instance id (UUID)
          readOnly: true
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        businessService:
          maxLength: 256
          minLength: 2
          type: string
          description: Business service key.
        businessId:
          maxLength: 64
          minLength: 2
          type: string
          description: "Business id is a unique identifier of a task. eg(Propertyid,\
            \ \nTLid, ServiceRequestid) \n"
        action:
          maxLength: 64
          minLength: 2
          type: string
          description: Actions are define for each business service.
        state:
          maxLength: 64
          minLength: 2
          type: string
          description: Status will be populate by efengine for each action, if it
            is configured.
          readOnly: true
        comment:
          maxLength: 64
          minLength: 2
          type: string
          description: consumer can pass the comment on each action.
        documents:
          type: array
          description: Documents can be attached with each of the action.
          items:
            $ref: '#/components/schemas/Document'
        assigner:
          $ref: '#/components/schemas/User'
        assignes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        nextActions:
          type: array
          description: Wf will return next possible action based on .
          readOnly: true
          items:
            type: string
        sla:
          type: integer
          description: Date from when license is valid as epoch.
          format: int64
        currentStatus:
          type: string
          description: Status after action performed
        previousStatus:
          type: string
          description: Status before action performed
        entity:
          type: object
          properties: {}
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Trade License
    BusinessService:
      required:
      - businessService
      - tenantId
      type: object
      properties:
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        uuid:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier uuid
        businessService:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the Trade License (UUID)
        getUri:
          maxLength: 32
          minLength: 2
          type: string
          description: Unique License Number of the Trade. This is  unique in system
            for a tenant. This is mandatory but always be generated on the final approval.
            In Case of Legacy License User will enter the Old License Number.
        postUri:
          maxLength: 32
          minLength: 2
          type: string
          description: Unique License Number of the Trade. This is  unique in system
            for a tenant. This is mandatory but always be generated on the final approval.
            In Case of Legacy License User will enter the Old License Number.
        states:
          type: array
          items:
            $ref: '#/components/schemas/State'
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the
    State:
      type: object
      properties:
        uuid:
          maxLength: 64
          minLength: 2
          type: string
          description: State Unique Identifier uuid
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        businessServiceId:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the Trade License (UUID)
        state:
          maxLength: 32
          minLength: 2
          type: string
          description: Unique License Number of the Trade. This is  unique in system
            for a tenant. This is mandatory but always be generated on the final approval.
            In Case of Legacy License User will enter the Old License Number.
        applicationStatus:
          type: string
          description: Application status as in module
        docUploadRequired:
          type: boolean
          description: Boolean to describe if documents are mandatory
        isStartState:
          type: boolean
          description: Boolean to describe if the workflow can be started from this
            state
        isTerminateState:
          type: boolean
          description: Boolean to describe if the state is the last state of workflow
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Trade License
    Action:
      type: object
      properties:
        uuid:
          maxLength: 64
          minLength: 2
          type: string
          description: State Unique Identifier uuid
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: TenantId of the ULB
        stateId:
          maxLength: 64
          minLength: 2
          type: string
          description: The uuid of the state on which action is to performed
        action:
          type: string
          description: The action to be performed
        nextStateId:
          maxLength: 64
          minLength: 2
          type: string
          description: The uuid of the resultant state
        roles:
          type: array
          description: Used for search result and create only
          items:
            type: string
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Trade License
    ProcessIntanceRequest:
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        ProcessInstances:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/ProcessInstance'
      description: Contract class to receive request. Array of TradeLicense items
        are used in case of create, whereas single TradeLicense item is used for update
    ProcessIntanceResponse:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        ProcessInstances:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/ProcessInstance'
      description: Contract class to send response. Array of TradeLicense items are
        used in case of search results or response for create, whereas single TradeLicense
        item is used for update
    BusinessServiceRequest:
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        BusinessService:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/BusinessService'
      description: Contract class to receive request. Array of TradeLicense items
        are used in case of create, whereas single TradeLicense item is used for update
    BusinessServiceResponse:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        BusinessService:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/BusinessService'
      description: Contract class to send response. Array of TradeLicense items are
        used in case of search results or response for create, whereas single TradeLicense
        item is used for update
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    ErrorRes_2:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error_2'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo_2:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error_2:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    AuditDetails:
      type: object
      properties:
        createdBy:
          type: string
          description: username (preferred) or userid of the user that created the
            object
        lastModifiedBy:
          type: string
          description: username (preferred) or userid of the user that last modified
            the object
        createdTime:
          type: integer
          description: epoch of the time object is created
          format: int64
        lastModifiedTime:
          type: integer
          description: epoch of the time object is last modified
          format: int64
      description: Collection of audit related fields used by most models
    User:
      required:
      - active
      - gender
      - locale
      - mobileNumber
      - name
      - tenantId
      - type
      - userName
      type: object
      properties:
        id:
          type: integer
          description: The unique id an user.
          format: int64
        userName:
          maxLength: 64
          minLength: 1
          type: string
          description: The unique username used for user login.
        password:
          maxLength: 64
          type: string
          description: Password for user login.
          format: password
        salutation:
          maxLength: 5
          type: string
          description: The salutation of user name. Example- Mr, Miss, Mrs
        name:
          maxLength: 100
          minLength: 3
          type: string
          description: The full name of the user.
        gender:
          type: string
          description: Gender of the user.
        mobileNumber:
          maxLength: 10
          type: string
          description: Mobile number ofuser the user
        emailId:
          maxLength: 128
          type: string
          description: Email address of the user
        altContactNumber:
          maxLength: 10
          type: string
          description: Alternate contact number of the user
        pan:
          maxLength: 10
          type: string
          description: PAN number of the user
        aadhaarNumber:
          maxLength: 12
          pattern: '[0-9]'
          type: string
          description: Aadhaar number of the user
        permanentAddress:
          maxLength: 300
          type: string
          description: Permanent address of the user.
        permanentCity:
          maxLength: 300
          type: string
          description: City of the permanent address.
        permanentPincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceCity:
          maxLength: 50
          type: string
          description: City of the correspondence address.
        correspondencePincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceAddress:
          maxLength: 300
          type: string
          description: Correspondence address of the user.
        active:
          type: boolean
          description: True if the user is active and False if the user is inactive.
        dob:
          type: string
          description: Data of bith of the user in dd/mm/yyyy format.
          format: date
        pwdExpiryDate:
          type: string
          description: Date on which the password registered will expire.
          format: date
          readOnly: true
        locale:
          maxLength: 10
          type: string
          description: Value will be set to "en_IN".
        type:
          maxLength: 20
          type: string
          description: System set value internally. For employee value will be always
            "EMPLOYEE". For citizen value will be "CITIZEN".
        signature:
          type: string
          description: Image to be loaded for the signature of the employee
        accountLocked:
          type: boolean
          description: Set to True if account is locked after several incorrect password
            attempt. False if account is not locked.
        roles:
          type: array
          description: List of roles that are attached to the user.
          items:
            $ref: '#/components/schemas/Role'
        fatherOrHusbandName:
          maxLength: 100
          type: string
          description: Name of user's father or husband.
        bloodGroup:
          maxLength: 3
          type: string
          description: Blood group of the user.
        identificationMark:
          maxLength: 300
          type: string
          description: Any identification mark of the person.
        photo:
          type: string
          description: Image to be loaded for the photo of the user
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the user master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the user master data was last modified.
          format: date
        otpReference:
          type: string
          description: This is the UUID token that we genarate as part of OTP.
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    Role:
      required:
      - name
      - tenantId
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the role.
          format: int64
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Role.
        code:
          maxLength: 50
          minLength: 2
          type: string
          description: The Code of the Role.
        description:
          maxLength: 256
          type: string
          description: The description of the Role.
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the role master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the role master data was last modified.
          format: date
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        uuid:
          type: string
          description: System Generated User id of the authenticated user.
        userName:
          type: string
          description: Unique user name of the authenticated user
        password:
          type: string
          description: password of the user.
        idToken:
          type: string
          description: This will be the OTP.
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role_2'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role_2:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        code:
          maxLength: 64
          type: string
          description: Unique code of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role_2'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
x-api-id: org.egov.wf.service
x-common-path: https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-1-1.yml
