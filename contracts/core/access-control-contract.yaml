openapi: 3.0.1
info:
  title: Access Control APIs
  description: All APIs available from Access Control services.
  contact:
    name: eGov
    email: info@egovernments.org
  version: 1.0.1
servers:
- url: /
paths:
  /access/v1/actions/_search:
    post:
      tags:
      - Action
      summary: Get the list of actions based on either roles or features.
      description: |
        Get the list of actions based on the input parameters.
      parameters:
      - name: roles
        in: query
        description: The list of role codes.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: features
        in: query
        description: The list of feature id's.
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
      requestBody:
        description: Request info for getting actions.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: requestInfo
  /access/v1/actions/_create:
    post:
      tags:
      - Action
      summary: Create a new action.
      description: |
        To create new action(s) in the system. An action entry is required for each and every path to authenticate the access based on the assigned role of an user.
      requestBody:
        description: Details for the new Action(s) entry + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ActionRequest'
        required: true
      responses:
        200:
          description: Action(s) created sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionResponse'
        400:
          description: Action(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: actionRequest
  /access/v1/actions/_update:
    put:
      tags:
      - Action
      summary: Update existing action(s).
      description: "To update the existing action(s) in the system. \n"
      requestBody:
        description: Details for the Action(s) entry with new values + RequestInfo
          meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ActionRequest'
        required: true
      responses:
        200:
          description: Update action(s) successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ActionResponse'
        400:
          description: Update action(s) failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: actionRequest
  /access/v1/actions/_validate:
    post:
      tags:
      - Action
      summary: Validate a particular action for a given tenant and roles of the tenant
      description: |
        Validate a particular action for a given tenant and roles of the tenant.
      requestBody:
        description: Request info for getting actions.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ValidateActionReq'
        required: true
      responses:
        200:
          description: Successful response without any content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidateActionRes'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: ValidateActionReq
  /access/v1/feature-role/_create:
    post:
      tags:
      - Feature-Role
      summary: Create mapping for feature and role.
      description: |
        Create mapping for feature and role.
      requestBody:
        description: Request info for getting actions.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FeatureRoleReq'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FeatureRoleRes'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: featureRoleRequest
  /access/v1/roles/_search:
    post:
      tags:
      - Role
      summary: Get the list of roles based on role codes.
      description: |
        Get the list of roles based on role codes in the input parameters.
      parameters:
      - name: code
        in: query
        description: The list of comma separated codes to filter Roles against. No
          providing any would end up in all Roles as there is nothing to filter against
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      requestBody:
        description: Request info for getting actions.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RolesReq'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: rolesReq
  /access/v1/roles/_create:
    post:
      tags:
      - Role
      summary: Create a new role.
      description: |
        To create new Role(s) in the system.
      requestBody:
        description: Details for the new role(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      responses:
        200:
          description: Role(s) created sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleResponse'
        400:
          description: Role(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: roleRequest
  /access/v1/roles/_update:
    put:
      tags:
      - Role
      summary: Update existing role(s).
      description: "To update the existing role(s) in the system. \n"
      requestBody:
        description: Details for the Role(s) entry with new values + RequestInfo meta
          data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      responses:
        200:
          description: Update role(s) successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleResponse'
        400:
          description: Update role(s) failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: roleRequest
  /access/v1/role-actions/_create:
    post:
      tags:
      - Role-Action
      summary: Create mapping for role and action(s).
      description: |
        Create mapping for role and action(s).
      requestBody:
        description: Details for the Role and Action(s) mapping + RequestInfo meta
          data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RoleActionsRequest'
        required: true
      responses:
        200:
          description: Role - Action(s) mapping created sucessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleActionsResponse'
        400:
          description: Role - Action(s) mapping failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: roleActionsRequest
components:
  schemas:
    Action:
      required:
      - name
      - tenantId
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the Action.
          format: int64
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Action.
        queryParams:
          maxLength: 100
          minLength: 5
          type: string
          description: The Name of the Action.
        url:
          maxLength: 100
          minLength: 10
          type: string
          description: The string url for the action.
        parentModule:
          type: integer
          description: Unique identifier of the Parent.
          format: int64
        orderNumber:
          type: integer
          description: Defines order for actions.
          format: int64
        displayName:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name which is used for displaying.
        enabled:
          type: boolean
          description: True if the action is required and False if the action is not
            required.
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the role master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the role master data was last modified.
          format: date
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
        serviceCode:
          type: integer
          description: Defines service code.
          format: int64
    Feature:
      required:
      - code
      - name
      - tenantId
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the Action.
          format: int64
        code:
          type: integer
          description: Unique code for service.
          format: int32
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Action.
        description:
          maxLength: 100
          minLength: 2
          type: string
          description: Description of the Feature.
        serviceCode:
          type: integer
          description: Defines service code.
          format: int64
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    Role:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the role.
          format: int64
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Role.
    RoleAction:
      type: object
      properties:
        roleCode:
          type: string
          description: The Role Code which is mapped for the action.
        actionId:
          type: integer
          description: The Id of the Action which is mapped to the role.
          format: int64
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which the role action mapping
            is done.
    ActionRequest:
      required:
      - actions
      - requestInfo
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo_2'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        actionMaster:
          type: string
          description: action master 
        enabled:
          type: boolean
          description: if enabled or not
        featureIds:
          type: array
          description: unique id for feature
          items: 
            type: integer
          format: int64
        leftIcon:
          type: string
          description: left icon
        navigationURL:
          type: string
          description: url for navigating
        rightIcon:
          type: string  
          description: right icon
        roleCodes:
          type: array
          description: codes specifying role 
          items: 
            type: string
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
          
    ActionResponse:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
    RoleRequest:
      required:
      - requestInfo
      - roles
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo_2'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role_2'
    RoleResponse:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role_2'
    RoleActionsRequest:
      required:
      - actions
      - role
      - tenantId
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo_2'
        role:
          $ref: '#/components/schemas/Role_2'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    RoleActionsResponse:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        roleActions:
          type: array
          items:
            $ref: '#/components/schemas/RoleAction'
    FeatureRoleReq:
      required:
      - feature
      - roleId
      - tenantId
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        roleId:
          type: string
          description: List of Role Id to be provided for mapping it to feature.
        feature:
          $ref: '#/components/schemas/Feature'
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    ValidateAction:
      required:
      - actionUrl
      - tenantRole
      type: object
      properties:
        tenantRole:
          $ref: '#/components/schemas/TenantRole'
        actionUrl:
          type: string
          description: Url of the action to be validated for given tenant
    ValidateActionReq:
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo_2'
        validateAction:
          $ref: '#/components/schemas/ValidateAction'
    FeatureRoleRes:
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/ResponseInfo'
        role:
          $ref: '#/components/schemas/Role'
        feature:
          $ref: '#/components/schemas/Feature'
    RolesReq:
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo_2'
    RequestInfo:
      required:
      - apiId
      - ts
      - ver
      type: object
      properties:
        apiId:
          type: string
          description: unique API ID
        ver:
          type: string
          description: API version
        ts:
          type: string
          description: response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn (timezone defaulted
            to +5.30)
        action:
          type: string
          description: api action like GET/POST/PUT/DELETE in case of http calls
        did:
          type: string
          description: device UUID from which API is called
        key:
          type: string
          description: API key (dynamic)
        msgId:
          type: string
          description: unique request message id, UUID, for handling API idempotency
        requesterId:
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          type: string
          description: unique API ID
        ver:
          type: string
          description: API version
        ts:
          type: string
          description: response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn (timezone defaulted
            to +5.30)
        resMsgId:
          type: string
          description: unique response message id (UUID)
        msgId:
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request e.g. successful, failed etc
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        description:
          type: string
        fields:
          type: object
          properties: {}
    ActionValidation:
      required:
      - allowed
      type: object
      properties:
        allowed:
          type: string
          enum:
          - TRUE
          - FALSE
    ErrorRes:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        error:
          $ref: '#/components/schemas/Error'
    ValidateActionRes:
      type: object
      properties:
        responseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        actionValidation:
          $ref: '#/components/schemas/ActionValidation'
    ErrorRes_2:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error_2'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo_2:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error_2:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    RequestInfo_2:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        id:
          type: integer
          description: User id of the authenticated user. Will be deprecated in future
          format: int32
        userName:
          type: string
          description: Unique user name of the authenticated user
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role_2'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role_2:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        description:
          type: string
          description: brief description of the role
        id:
          type: integer
          format: int64
          description: unique id parameter 
        code:
          type: string
          description: unique role code
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the role master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the role master data was last modified.
          format: date  
          
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role_2'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.